{"version":3,"sources":["helpers.js","components/StorePicker.js","components/Header.js","components/AddFishForm.js","components/EditFishForm.js","components/Inventory.js","components/Order.js","sample-fishes.js","components/Fish.js","base.js","components/App.js","components/NotFound.js","components/Router.js","index.js"],"names":["formatPrice","cents","toLocaleString","style","currency","rando","arr","Math","floor","random","length","getFunName","adjectives","StorePicker","myInput","React","createRef","goToStore","event","preventDefault","storeName","current","value","props","history","push","className","onSubmit","this","type","ref","required","placeholder","defaultValue","Component","Header","tagline","AddFishForm","nameRef","priceRef","statusRef","descRef","imageRef","createFish","fish","name","price","parseFloat","status","desc","image","addFish","currentTarget","reset","EditFishForm","handleChange","console","log","updatedFish","updateFish","index","onChange","onClick","deleteFish","Inventory","Object","keys","fishes","map","key","loadSampleFishes","Order","renderOrder","count","order","transitionOptions","classNames","timeout","enter","exit","isAvailable","component","removeFromOrder","orderIds","total","reduce","prevTotal","fish1","fish2","fish3","fish4","fish5","fish6","fish7","fish8","fish9","Fish","details","src","alt","disabled","addToOrder","firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","base","Rebase","createClass","database","App","state","Date","now","setState","sampleFishes","params","match","localStorageRef","localStorage","getItem","storeId","JSON","parse","syncState","context","setItem","stringify","removeBinding","NotFound","Router","BrowserRouter","Switch","Route","exact","path","render","document","querySelector"],"mappings":"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","file":"static/js/main.2dee0fe8.chunk.js","sourcesContent":["export function formatPrice(cents) {\n  return (cents / 100).toLocaleString(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\"\n  });\n}\n\nexport function rando(arr) {\n  return arr[Math.floor(Math.random() * arr.length)];\n}\n\nexport function slugify(text) {\n  return text\n    .toString()\n    .toLowerCase()\n    .replace(/\\s+/g, \"-\")\n    .replace(/[^\\w-]+/g, \"\")\n    .replace(/--+/g, \"-\")\n    .replace(/^-+/, \"\")\n    .replace(/-+$/, \"\");\n}\n\nexport function getFunName() {\n  const adjectives = [\n    \"adorable\",\n    \"beautiful\",\n    \"clean\",\n    \"drab\",\n    \"elegant\",\n    \"fancy\",\n    \"glamorous\",\n    \"handsome\",\n    \"long\",\n    \"magnificent\",\n    \"old-fashioned\",\n    \"plain\",\n    \"quaint\",\n    \"sparkling\",\n    \"ugliest\",\n    \"unsightly\",\n    \"angry\",\n    \"bewildered\",\n    \"clumsy\",\n    \"defeated\",\n    \"embarrassed\",\n    \"fierce\",\n    \"grumpy\",\n    \"helpless\",\n    \"itchy\",\n    \"jealous\",\n    \"lazy\",\n    \"mysterious\",\n    \"nervous\",\n    \"obnoxious\",\n    \"panicky\",\n    \"repulsive\",\n    \"scary\",\n    \"thoughtless\",\n    \"uptight\",\n    \"worried\"\n  ];\n\n  const nouns = [\n    \"women\",\n    \"men\",\n    \"children\",\n    \"teeth\",\n    \"feet\",\n    \"people\",\n    \"leaves\",\n    \"mice\",\n    \"geese\",\n    \"halves\",\n    \"knives\",\n    \"wives\",\n    \"lives\",\n    \"elves\",\n    \"loaves\",\n    \"potatoes\",\n    \"tomatoes\",\n    \"cacti\",\n    \"foci\",\n    \"fungi\",\n    \"nuclei\",\n    \"syllabuses\",\n    \"analyses\",\n    \"diagnoses\",\n    \"oases\",\n    \"theses\",\n    \"crises\",\n    \"phenomena\",\n    \"criteria\",\n    \"data\"\n  ];\n\n  return `${rando(adjectives)}-${rando(adjectives)}-${rando(nouns)}`;\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { getFunName } from \"../helpers\";\n\nclass StorePicker extends React.Component {\n    static propTypes = {\n        history: PropTypes.object\n    }\n\n    myInput = React.createRef();\n    // constructor() {\n    //     // Can't run anything in a contructor before calling super(), its essentially runs the component.\n    //     super();\n    //     // Must bind this so that the instance of StorePicker can be accessed.\n    //     this.goToStore = this.goToStore.bind(this);\n    //     // This way or binding isn't ideal becuase for every method you create you need to bind it in the constructor and so the constructor becomes very big.\n    // }\n\n    // In summary, if you want to access \"this\" you either need to bind it through the instructor or you use the syntax written below. Here we declare a property of the class instead of a method.\n\n    goToStore = event => {\n        // 1. stop form from submitting\n        event.preventDefault();\n        // 2. get text from input. Here \"current\" is react thing (its part of the object) and \"value\" is a javascript thing.\n        const storeName = this.myInput.current.value;\n        // 3. change the page to /store/whatever they entered. \n        // NB* we don't want to refresh the page, just change the url. We need to access React Router.\n        this.props.history.push(`/store/${storeName}`);\n        // note how fast the change is when you go back and forward in the browser. This is because you are not reloading the page, you are just using something called push state.\n    }\n\n\n    render() {\n        return (\n            <form className=\"store-selector\" onSubmit={this.goToStore}>\n                {/* this is a Store Picker */}\n                <h1>Please enter a Store</h1>\n                <input\n                    type=\"text\"\n                    ref={this.myInput}\n                    required\n                    placeholder=\"Store Name\"\n                    defaultValue={getFunName()}\n                />\n                <button type=\"submit\">Visit Store</button>\n            </form>\n        )\n    }\n}\n\nexport default StorePicker;\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nclass Header extends React.Component {\n    render() {\n        return (\n            <header className=\"top\">\n                <h1>\n                    Catch\n                    <span className=\"ofThe\">\n                        <span className=\"of\">\n                            Of\n                        </span>\n                        <span className=\"the\">\n                            The\n                        </span>\n                    </span>\n                    Day\n                </h1>\n                <h3 className=\"tagline\">\n                    <span>{this.props.tagline}</span>\n                </h3>\n            </header>\n\n        );\n    }\n}\n\nHeader.propTypes = {\n    tagline: PropTypes.string.isRequired\n};\n\nexport default Header;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass AddFishForm extends React.Component {\n    nameRef = React.createRef();\n    priceRef = React.createRef();\n    statusRef = React.createRef();\n    descRef = React.createRef();\n    imageRef = React.createRef();\n\n    // remember lowercase p and uppercase T \n    static propTypes = {\n        addFish: PropTypes.func,\n    }\n\n    createFish = event => {\n        // 1. stop form submitting\n        event.preventDefault();\n        // make our fish object\n        const fish = {\n            name: this.nameRef.current.value,\n            price: parseFloat(this.priceRef.current.value), // Here you can use the method parcefloat() for the price because it converts the string to a number. Its better than Number() because it converts a number followed by letters back to a number so there are fewer issues with this method. For example parceFloat(\"3eu\") = 3, Number(\"3eu\") = NaN.\n            status: this.statusRef.current.value,\n            desc: this.descRef.current.value,\n            image: this.imageRef.current.value\n        };\n        // set state of fish using addFish() method in App.js. Remember the addFish() method has been passed down by props.\n        this.props.addFish(fish);\n        // Finally refresh the page\n        // Here currentTarget refers to the form tag and the reset() method resets the form.\n        // NB* state resets when you refresh the page.\n        event.currentTarget.reset();\n    }\n\n    render() {\n        return (\n            <form className=\"fish-edit\" onSubmit={this.createFish}>\n                <input name=\"name\" type=\"text\" placeholder=\"name\" ref={this.nameRef} required />\n                <input name=\"price\" type=\"text\" placeholder=\"price\" ref={this.priceRef} required />\n                <select name=\"status\" ref={this.statusRef}>\n                    <option value=\"available\">Fresh!!</option>\n                    <option value=\"unavailable\">Sold Out!!</option>\n                </select>\n                <textarea name=\"desc\" placeholder=\"desc\" ref={this.descRef}></textarea>\n                <input name=\"image\" type=\"text\" placeholder=\"image\" ref={this.imageRef} />\n                <button type=\"submit\">+ Add Fish</button>\n            </form>\n        );\n    }\n}\n\nexport default AddFishForm;","import React from 'react';\nimport PropTypes from \"prop-types\";\n\nclass EditFishForm extends React.Component {\n\n    static propTypes = {\n        fish: PropTypes.shape({\n            image: PropTypes.string,\n            name: PropTypes.string,\n            price: PropTypes.number,\n            status: PropTypes.string,\n            desc: PropTypes.string,\n        }),\n        index: PropTypes.string,\n        updateFish: PropTypes.func,\n    }\n\n    handleChange = event => {\n        console.log(event.currentTarget.value)\n        // update that fish\n        // 1. Take copy of current fish\n        const updatedFish = {\n            ...this.props.fish,\n            [event.currentTarget.name]: event.currentTarget.value\n        };\n        // 2. Get updated fish to \"swim upstream\" to state because state is kept in App.js\n        this.props.updateFish(this.props.index, updatedFish);\n        console.log(updatedFish)\n    }\n    render() {\n        return (\n            <div className=\"fish-edit\">\n                <input\n                    type=\"text\"\n                    name=\"name\"\n                    onChange={this.handleChange}\n                    value={this.props.fish.name}\n                />\n                <input\n                    type=\"text\"\n                    name=\"price\"\n                    onChange={this.handleChange}\n                    value={this.props.fish.price}\n                />\n                <select\n                    type=\"text\"\n                    name=\"status\"\n                    onChange={this.handleChange}\n                    value={this.props.fish.status}\n                >\n                    <option value=\"available\">Fresh!</option>\n                    <option value=\"unavailable\">Sold Out!</option>\n                </select>\n                <textarea\n                    name=\"desc\"\n                    onChange={this.handleChange}\n                    value={this.props.fish.desc}\n                />\n                <input\n                    type=\"text\"\n                    name=\"image\"\n                    onChange={this.handleChange}\n                    value={this.props.fish.image}\n                />\n                <button\n                    onClick={() => this.props.deleteFish(this.props.index)} >Remove Fish</button>\n            </div>\n        );\n    }\n}\n\nexport default EditFishForm;","import React from 'react';\nimport AddFishForm from './AddFishForm';\nimport EditFishForm from './EditFishForm';\nimport PropTypes from \"prop-types\";\n\nclass Inventory extends React.Component {\n\n    static propTypes = {\n        fishes: PropTypes.object,\n        updateFish: PropTypes.func,\n        deleteFish: PropTypes.func,\n        loadSampleFishes: PropTypes.func,\n    }\n\n    render() {\n        return (\n            <div className=\"inventory\">\n                <h2>Inventory!!!</h2>\n                {Object.keys(this.props.fishes).map(key => (\n                    <EditFishForm\n                        key={key}\n                        index={key}\n                        fish={this.props.fishes[key]}\n                        updateFish={this.props.updateFish}\n                        deleteFish={this.props.deleteFish}\n                    />\n                ))}\n                <AddFishForm addFish={this.props.addFish} />\n                <button onClick={this.props.loadSampleFishes}>Load Sample Fishes</button>\n            </div>\n\n        );\n    }\n}\n\nexport default Inventory;","import React from \"react\";\nimport { formatPrice } from \"../helpers\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport PropTypes from \"prop-types\";\n\nclass Order extends React.Component {\n\n    static propTypes = {\n        fishes: PropTypes.object,\n        order: PropTypes.object,\n        removeFromOrder: PropTypes.func,\n    }\n\n    renderOrder = key => {\n        const fish = this.props.fishes[key];\n        const count = this.props.order[key];\n\n        const transitionOptions = {\n            classNames: \"order\",\n            key: key,\n            timeout: { enter: 500, exit: 500 }\n        }\n\n        // Before we return this list item we need to check if that fish is available \n        const isAvailable = fish && fish.status === 'available';\n\n        // We also need to check if the fish is loaded before we continue\n        if (!fish) return null;\n        // This just returns nothing so that when we reload the page our localstorage is prevented from displaying our fish for a split second\n\n        if (!isAvailable) {\n            return <CSSTransition {...transitionOptions}>\n                <li key={key}>\n                    Sorry {fish ? fish.name : 'fish'} is no longer available!\n                </li>\n            </CSSTransition>\n        }\n\n        return (\n            <CSSTransition classNames=\"order\" key={key} timeout={{ enter: 500, exit: 500 }}>\n                <li key={key}>\n                    <span>\n                        <TransitionGroup component=\"span\" className=\"count\">\n                            <CSSTransition {...transitionOptions}>\n                                <span>{count}</span>\n                            </CSSTransition>\n                        </TransitionGroup>\n                        lbs {fish.name}\n                        {formatPrice(count * fish.price)}\n                        <button onClick={() => this.props.removeFromOrder(key)}>&times; </button>\n                    </span>\n                </li>\n            </CSSTransition >\n        )\n    };\n    render() {\n        const orderIds = Object.keys(this.props.order);\n        const total = orderIds.reduce((prevTotal, key) => {\n            const fish = this.props.fishes[key];\n            const count = this.props.order[key];\n            // check if there is a fish and is the status of the fish is available\n            const isAvailable = fish && fish.status === \"available\";\n            // below the if statement says \"if the fish is available/if isAvailable is true\"\n            if (isAvailable) {\n                return prevTotal + count * fish.price;\n            }\n            return prevTotal;\n            // don't forget to add a starting value, ours is 0.\n        }, 0);\n\n        return (\n            <div className=\"order\">\n                <h2>Order!!!</h2>\n                <TransitionGroup component=\"ul\" className=\"order\">\n                    {orderIds.map(this.renderOrder)}\n                </TransitionGroup>\n                <div className=\"total\">\n                    <strong>{formatPrice(total)}</strong>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Order;","// This is just some sample data so you don't have to think of your own!\nconst fishes = {\n  fish1: {\n    name: \"Pacific Halibut\",\n    image: \"/images/hali.jpg\",\n    desc:\n      \"Everyone’s favorite white fish. We will cut it to the size you need and ship it.\",\n    price: 1724,\n    status: \"available\"\n  },\n\n  fish2: {\n    name: \"Lobster\",\n    image: \"/images/lobster.jpg\",\n    desc:\n      \"These tender, mouth-watering beauties are a fantastic hit at any dinner party.\",\n    price: 3200,\n    status: \"available\"\n  },\n\n  fish3: {\n    name: \"Sea Scallops\",\n    image: \"/images/scallops.jpg\",\n    desc:\n      \"Big, sweet and tender. True dry-pack scallops from the icey waters of Alaska. About 8-10 per pound\",\n    price: 1684,\n    status: \"unavailable\"\n  },\n\n  fish4: {\n    name: \"Mahi Mahi\",\n    image: \"/images/mahi.jpg\",\n    desc:\n      \"Lean flesh with a mild, sweet flavor profile, moderately firm texture and large, moist flakes. \",\n    price: 1129,\n    status: \"available\"\n  },\n\n  fish5: {\n    name: \"King Crab\",\n    image: \"/images/crab.jpg\",\n    desc:\n      \"Crack these open and enjoy them plain or with one of our cocktail sauces\",\n    price: 4234,\n    status: \"available\"\n  },\n\n  fish6: {\n    name: \"Atlantic Salmon\",\n    image: \"/images/salmon.jpg\",\n    desc:\n      \"This flaky, oily salmon is truly the king of the sea. Bake it, grill it, broil it...as good as it gets!\",\n    price: 1453,\n    status: \"available\"\n  },\n\n  fish7: {\n    name: \"Oysters\",\n    image: \"/images/oysters.jpg\",\n    desc: \"A soft plump oyster with a sweet salty flavor and a clean finish.\",\n    price: 2543,\n    status: \"available\"\n  },\n\n  fish8: {\n    name: \"Mussels\",\n    image: \"/images/mussels.jpg\",\n    desc:\n      \"The best mussels from the Pacific Northwest with a full-flavored and complex taste.\",\n    price: 425,\n    status: \"available\"\n  },\n\n  fish9: {\n    name: \"Jumbo Prawns\",\n    image: \"/images/prawns.jpg\",\n    desc:\n      \"With 21-25 two bite prawns in each pound, these sweet morsels are perfect for shish-kabobs.\",\n    price: 2250,\n    status: \"available\"\n  }\n};\n\nexport default fishes;\n","import React from \"react\";\nimport PropTypes, { shape } from \"prop-types\";\nimport { formatPrice } from \"../helpers\";\n\nclass Fish extends React.Component {\n    // There is more documentation about proptypes online on react's website\n    // Here shape is a function that accepts an object where we can specify what goes inside it.\n    static propTypes = {\n        details: shape({\n            image: PropTypes.string,\n            name: PropTypes.string,\n            price: PropTypes.number,\n            status: PropTypes.string,\n            desc: PropTypes.string,\n        }),\n        addToOrder: PropTypes.func,\n    }\n    // Can use a handleClick method below with the button but often theres no need to if the function only does one thing.\n    // Therefore I just wrote the function inline\n    // handleClick = () => {\n    //     this.props.addToOrder(this.props.index);\n    // }\n\n    render() {\n\n        const { image, name, price, status, desc } = this.props.details;\n\n        const isAvailable = status === \"available\";\n\n        return (\n            <li className=\"menu-fish\">\n                <img src={image} alt={name} />\n                <h3 className=\"fish-name\">\n                    {name}\n                    <span className=\"price\">{formatPrice(price)}</span>\n                </h3>\n                <p>{desc}</p>\n                <button disabled={!isAvailable} onClick={() => { this.props.addToOrder(this.props.index) }}>\n                    {isAvailable ? 'Add to Order' : \"Sold Out!\"}\n                </button>\n            </li>\n        )\n    }\n}\n\nexport default Fish;","import Rebase from \"re-base\";\nimport firebase from \"firebase/app\";\nimport 'firebase/database'; // If using Firebase database\nimport 'firebase/storage';  // If using Firebase storage\n\nconst firebaseApp = firebase.initializeApp({\n    apiKey: \"AIzaSyADEj20z2wbTMrM3t9BV_akfXbLM0Y169w\",\n    authDomain: \"henry-catch-of-the-day.firebaseapp.com\",\n    databaseURL: \"https://henry-catch-of-the-day-default-rtdb.firebaseio.com\"\n});\n\nconst base = Rebase.createClass(firebaseApp.database());\n\n// this is a named export so has to be exported with curly brackets\nexport { firebaseApp };\n\n// this is a default export\nexport default base;\n","import React from \"react\";\nimport Header from \"./Header\";\nimport Inventory from \"./Inventory\";\nimport Order from \"./Order\";\nimport PropTypes from \"prop-types\";\nimport sampleFishes from \"../sample-fishes\";\nimport Fish from \"./Fish\";\nimport base from \"../base\";\n\nclass App extends React.Component {\n    state = {\n        fishes: {},\n        order: {}\n    };\n\n    static propTypes = {\n        match: PropTypes.object,\n    }\n\n    // Lifecycle methods\n    // this ref is different to the inputs we have in our app. This ref refers to the database in firebase.\n\n    componentDidMount() {\n        const { params } = this.props.match;\n\n        // first reinstate local storage\n        const localStorageRef = localStorage.getItem(params.storeId);\n        if (localStorageRef) {\n            this.setState({ order: JSON.parse(localStorageRef) });\n        }\n\n        this.ref = base.syncState(`${params.storeId}/fishes`, {\n            context: this,\n            state: 'fishes'\n        });\n    }\n\n    // We need to use componentDidUpdate() becuase it runs whenever someone updates something, its not called for the initial render\n\n    componentDidUpdate() {\n        // how do we set this.state.order (the state of the order) in our local storage\n        // We want to set the order for that particular store so we do what did in componentDidMount() and get hold of the particular store via the storeId\n        localStorage.setItem(\n            this.props.match.params.storeId,\n            JSON.stringify(this.state.order)\n        );\n        // The only issue with this is that when you refresh the page componentDidMount() runs which changes state.\n        // This then triggers componentDidUpdate()\n    }\n\n    // If you go back and into another store you've created two stores. If your user does this then you never clean up what was present at a particular store...\n    // therefore we use another lifecycle method\n\n    componentWillUnmount() {\n        base.removeBinding(this.ref);\n    }\n\n    // We can't add to state in through each individual component.\n    // Any function that updates state needs to live in the same component where state lives. Which as you can see, state lives above this line.\n\n    addFish = fish => {\n        // Options you may think would work to add things to state\n        // this.state.fishes.push(fish) for an array\n        // this.state.fishes.fish1 = fish for an object\n        // Neither work!!\n\n        // Instead you need to use setState()\n        // 1. take a copy of existing state\n        const fishes = { ...this.state.fishes };\n        // 2. add our new fish to the fishes variable\n        fishes[`fish${Date.now()}`] = fish;\n        // 3. set the new fishes object to state\n        this.setState({\n            fishes: fishes\n        });\n    };\n\n    updateFish = (key, updatedFish) => {\n        // 1. Take copy of the current state\n        const fishes = { ...this.state.fishes };\n        // 2. Update that state\n        fishes[key] = updatedFish;\n        // 3. Set that to state\n        this.setState({\n            fishes: fishes\n        })\n    }\n\n    deleteFish = (key) => {\n        // take a copy of state\n        const fishes = { ...this.state.fishes }\n        // update the state\n        // this is a slightly odd was of doing it but this works with firebase\n        fishes[key] = null;\n        // update state\n        this.setState({\n            fishes: fishes\n        })\n    }\n\n    removeFromOrder = (key) => {\n        // take a copy of state\n        const order = { ...this.state.order };\n        console.log(order);\n        // The or operator (||) is used to create this logic to remove order item from order\n        // order[key] = order[key] - 1 || 0 \n        // You can also do it this way...\n        delete order[key];\n        // Remember state needs to be updated. Therefore we call setState() to update our state object\n        this.setState({\n            order: order\n        })\n    }\n\n    loadSampleFishes = () => {\n        this.setState({\n            fishes: sampleFishes\n        })\n    };\n\n    addToOrder = (key) => {\n        // 1. take a copy of existing state\n        const order = { ...this.state.order };\n        // Either add to order or update the order\n        // If this particular fish exists in your order then it adds 1 or it just returns 1. The or operator (||) is used to create this logic \n        order[key] = order[key] + 1 || 1\n        // Call setState() to update our state object\n        this.setState({\n            order: order\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"catch-of-the-day\">\n                <div className=\"menu\">\n                    <Header tagline=\"Catch of the Day\" />\n                    <ul className=\"fishes\">\n                        {/* Object.keys turns the fishes object into an array which you can loop over */}\n                        {Object.keys(this.state.fishes).map(key => (\n                            <Fish\n                                index={key}\n                                key={key}\n                                details={this.state.fishes[key]}\n                                addToOrder={this.addToOrder}\n                            />\n                        ))}\n                    </ul>\n                </div>\n                <Order\n                    {...this.state}\n                    removeFromOrder={this.removeFromOrder}\n                ></Order>\n                <Inventory\n                    addFish={this.addFish}\n                    updateFish={this.updateFish}\n                    deleteFish={this.deleteFish}\n                    loadSampleFishes={this.loadSampleFishes}\n                    fishes={this.state.fishes}\n                ></Inventory>\n            </div>\n        );\n    }\n}\n\nexport default App;","import React from \"react\";\n\nconst NotFound = () => (\n    <div>\n        <h2>Not Found!!!!!!</h2>\n    </div>\n)\n\nexport default NotFound;","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport StorePicker from \"./StorePicker\";\nimport App from \"./App\";\nimport NotFound from \"./NotFound\";\n\n// Everything in React is a component, even the Router is a component.\n// The switch tag \n\nconst Router = () => (\n    <BrowserRouter>\n        <Switch>\n            <Route exact path=\"/\" component={StorePicker} />\n            <Route exact path=\"/store/:storeId\" component={App} />\n            <Route exact path=\"/notfound\" component={NotFound} />\n        </Switch>\n    </BrowserRouter>\n);\n\nexport default Router;","import React from \"react\";\nimport { render } from \"react-dom\";\nimport Router from \"./components/Router\";\nimport \"./css/style.css\";\n\nrender(<Router />, document.querySelector('#main'));"],"sourceRoot":""}